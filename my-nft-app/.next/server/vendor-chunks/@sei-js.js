"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sei-js";
exports.ids = ["vendor-chunks/@sei-js"];
exports.modules = {

/***/ "(ssr)/./node_modules/@sei-js/evm/dist/esm/precompiles/bank.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sei-js/evm/dist/esm/precompiles/bank.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BANK_PRECOMPILE_ABI: () => (/* binding */ BANK_PRECOMPILE_ABI),\n/* harmony export */   BANK_PRECOMPILE_ADDRESS: () => (/* binding */ BANK_PRECOMPILE_ADDRESS),\n/* harmony export */   ETHERS_BANK_PRECOMPILE_ABI: () => (/* binding */ ETHERS_BANK_PRECOMPILE_ABI),\n/* harmony export */   getBankPrecompileEthersV6Contract: () => (/* binding */ getBankPrecompileEthersV6Contract)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/contract/contract.js\");\n\n/**\n * The address of the BANK precompile contract, which can be used for interoperability between the EVM and Cosmos.\n *\n * @example\n * Wagmi: Use the `useReadContract` hook to read the balance of the connected account.\n * ```tsx\n * import { BANK_PRECOMPILE_ADDRESS, BANK_PRECOMPILE_ABI } from '@sei-js/evm';\n * import { useReadContract } from 'wagmi';\n *\n * // Make sure your component is wrapped in a WagmiProvider\n * const { address } = useAccount();\n *\n *  const { data } = useReadContract({\n *    abi: BANK_PRECOMPILE_ABI,\n *    address: BANK_PRECOMPILE_ADDRESS,\n *    functionName: 'balance',\n *    args: [address, 'usei']\n *  });\n *\n *  console.log({ balance: data.balance });\n * ```\n *\n * @example\n * ethers v6: Use the `ethers` library and precompiles to read the balance of the connected account.\n * ```tsx\n * import { BANK_PRECOMPILE_ADDRESS } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const accounts = await provider.send('eth_requestAccounts', []);\n *\n * const bankPrecompileContract = getBankPrecompileEthersV6Contract(BANK_PRECOMPILE_ADDRESS, signer);\n *\n * const balance = await bankPrecompileContract.balance(accounts[0], 'usei');\n * ```\n *\n * @category Cosmos Interoperability\n */\nconst BANK_PRECOMPILE_ADDRESS = '0x0000000000000000000000000000000000001001';\n/**\n * The ABI for the bank precompile contract, which can be used for interoperability between the EVM and Cosmos.\n *\n * @example\n * Wagmi: Use the `useReadContract` hook to read the balance of the connected account.\n * ```tsx\n * import { BANK_PRECOMPILE_ADDRESS, BANK_PRECOMPILE_ABI } from '@sei-js/evm';\n * import { useReadContract } from 'wagmi';\n *\n * // Make sure your component is wrapped in a WagmiProvider\n * const { address } = useAccount();\n *\n *  const { data } = useReadContract({\n *    abi: BANK_PRECOMPILE_ABI,\n *    address: BANK_PRECOMPILE_ADDRESS,\n *    functionName: 'balance',\n *    args: [address, 'usei']\n *  });\n *\n *  console.log({ balance: data.balance });\n * ```\n *\n * @category Cosmos Interoperability\n */\nconst BANK_PRECOMPILE_ABI = [\n\t{\n\t\tinputs: [{ internalType: 'address', name: 'acc', type: 'address' }],\n\t\tname: 'all_balances',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{ internalType: 'uint256', name: 'amount', type: 'uint256' },\n\t\t\t\t\t{ internalType: 'string', name: 'denom', type: 'string' }\n\t\t\t\t],\n\t\t\t\tinternalType: 'struct IBank.Coin[]',\n\t\t\t\tname: 'response',\n\t\t\t\ttype: 'tuple[]'\n\t\t\t}\n\t\t],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{ internalType: 'address', name: 'acc', type: 'address' },\n\t\t\t{ internalType: 'string', name: 'denom', type: 'string' }\n\t\t],\n\t\tname: 'balance',\n\t\toutputs: [{ internalType: 'uint256', name: 'amount', type: 'uint256' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [{ internalType: 'string', name: 'denom', type: 'string' }],\n\t\tname: 'decimals',\n\t\toutputs: [{ internalType: 'uint8', name: 'response', type: 'uint8' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [{ internalType: 'string', name: 'denom', type: 'string' }],\n\t\tname: 'name',\n\t\toutputs: [{ internalType: 'string', name: 'response', type: 'string' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{ internalType: 'address', name: 'fromAddress', type: 'address' },\n\t\t\t{ internalType: 'address', name: 'toAddress', type: 'address' },\n\t\t\t{ internalType: 'string', name: 'denom', type: 'string' },\n\t\t\t{ internalType: 'uint256', name: 'amount', type: 'uint256' }\n\t\t],\n\t\tname: 'send',\n\t\toutputs: [{ internalType: 'bool', name: 'success', type: 'bool' }],\n\t\tstateMutability: 'nonpayable',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [{ internalType: 'string', name: 'toNativeAddress', type: 'string' }],\n\t\tname: 'sendNative',\n\t\toutputs: [{ internalType: 'bool', name: 'success', type: 'bool' }],\n\t\tstateMutability: 'payable',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [{ internalType: 'string', name: 'denom', type: 'string' }],\n\t\tname: 'supply',\n\t\toutputs: [{ internalType: 'uint256', name: 'response', type: 'uint256' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [{ internalType: 'string', name: 'denom', type: 'string' }],\n\t\tname: 'symbol',\n\t\toutputs: [{ internalType: 'string', name: 'response', type: 'string' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t}\n];\n/**\n * The ABI for the bank precompile contract, which can be used for interoperability between the EVM and Cosmos.\n *\n * @example\n * ethers v6: Use the `ethers` library and precompiles to read the balance of the connected account.\n * ```tsx\n * import { BANK_PRECOMPILE_ADDRESS, ETHERS_BANK_PRECOMPILE_ABI, BankPrecompileContract } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const accounts = await provider.send('eth_requestAccounts', []);\n *\n * const bankPrecompileContract = new ethers.Contract(BANK_PRECOMPILE_ADDRESS, ETHERS_BANK_PRECOMPILE_ABI, signer) as BankPrecompileContract;\n *\n * const balance = await bankPrecompileContract.balance(accounts[0], 'usei');\n * ```\n *\n *\n * @category Cosmos Interoperability\n */\nconst ETHERS_BANK_PRECOMPILE_ABI = BANK_PRECOMPILE_ABI;\n/**\n * Creates and returns an ethers v6 contract instance with the provided signer, for use in interoperability between the EVM and Cosmos.\n *\n * @example\n * ```tsx\n * import { getBankPrecompileEthersV6Contract } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const accounts = await provider.send('eth_requestAccounts', []);\n *\n * const bankPrecompileContract = getBankPrecompileEthersV6Contract(signer);\n *\n * const balance = await bankPrecompileContract.balance(accounts[0], 'usei');\n * ```\n *\n * @param runner a [Provider](https://docs.ethers.org/v6/api/providers/) (read-only) or ethers.Signer to use with the contract.\n * @returns The typed contract instance allowing interaction with the precompile contract.\n * @category Cosmos Interoperability\n */\nconst getBankPrecompileEthersV6Contract = (runner) => {\n\treturn new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(BANK_PRECOMPILE_ADDRESS, ETHERS_BANK_PRECOMPILE_ABI, runner);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sei-js/evm/dist/esm/precompiles/bank.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@sei-js/evm/dist/esm/precompiles/wasm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@sei-js/evm/dist/esm/precompiles/wasm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ETHERS_WASM_PRECOMPILE_ABI: () => (/* binding */ ETHERS_WASM_PRECOMPILE_ABI),\n/* harmony export */   WASM_PRECOMPILE_ABI: () => (/* binding */ WASM_PRECOMPILE_ABI),\n/* harmony export */   WASM_PRECOMPILE_ADDRESS: () => (/* binding */ WASM_PRECOMPILE_ADDRESS),\n/* harmony export */   getWasmPrecompileEthersV6Contract: () => (/* binding */ getWasmPrecompileEthersV6Contract)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/ethers/lib.esm/contract/contract.js\");\n\n/**\n * The address of the WASM precompile contract, which can be used for interoperability between the EVM and Cosmos.\n *\n * @example\n * Wagmi: Use the `useReadContract` hook to read the associated Cosmos address for the connected account.\n * ```tsx\n * import { WASM_PRECOMPILE_ADDRESS, WASM_PRECOMPILE_ABI } from '@sei-js/evm';\n * import { useReadContract } from 'wagmi';\n *\n * // Make sure your component is wrapped in a WagmiProvider\n * const associatedSeiAddress = useReadContract({ abi: WASM_PRECOMPILE_ABI, address: WASM_PRECOMPILE_ADDRESS, functionName: 'query', args: [CW_CONTRACT_ADDRESS, REQUEST] });\n * ```\n *\n * @example\n * ethers v6: Use the `ethers` library and precompiles to read the associated Cosmos address for the connected account.\n * ```tsx\n * import { WASM_PRECOMPILE_ADDRESS } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const wasmPrecompileContract = getWasmPrecompileEthersV6Contract(WASM_PRECOMPILE_ADDRESS, signer);\n *\n * const queryResponse = await addressPrecompileContract.connect().query(CW_CONTRACT_ADDRESS, REQUEST);\n * ```\n *\n * @category Cosmos Interoperability\n */\nconst WASM_PRECOMPILE_ADDRESS = '0x0000000000000000000000000000000000001002';\n/**\n * The ABI for the precompile contract, which can be used for interoperability between the EVM and Cosmos.\n *\n * @example\n * Wagmi: Use the `useReadContract` hook to read the associated Cosmos address for the connected account.\n * ```tsx\n * import { WASM_PRECOMPILE_ADDRESS, WASM_PRECOMPILE_ABI } from '@sei-js/evm';\n * import { useReadContract } from 'wagmi';\n *\n * // Make sure your component is wrapped in a WagmiProvider\n * const associatedSeiAddress = useReadContract({ abi: WASM_PRECOMPILE_ABI, address: WASM_PRECOMPILE_ADDRESS, functionName: 'query', args: [CW_CONTRACT_ADDRESS, REQUEST] });\n * ```\n *\n * @example\n * ethers v6: Use the `ethers` library and precompiles to read the associated Cosmos address for the connected account.\n * ```tsx\n * import { WASM_PRECOMPILE_ADDRESS, WASM_PRECOMPILE_ABI, WasmPrecompileContract } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const wasmPrecompileContract = new ethers.Contract(WASM_PRECOMPILE_ADDRESS, WASM_PRECOMPILE_ABI, signer) as WasmPrecompileContract;\n *\n * const queryResponse = await addressPrecompileContract.connect().query(CW_CONTRACT_ADDRESS, REQUEST);\n * ```\n *\n * @category Cosmos Interoperability\n */\nconst WASM_PRECOMPILE_ABI = [\n\t{\n\t\tinputs: [\n\t\t\t{ internalType: 'string', name: 'contractAddress', type: 'string' },\n\t\t\t{ internalType: 'bytes', name: 'msg', type: 'bytes' },\n\t\t\t{ internalType: 'bytes', name: 'coins', type: 'bytes' }\n\t\t],\n\t\tname: 'execute',\n\t\toutputs: [{ internalType: 'bytes', name: 'response', type: 'bytes' }],\n\t\tstateMutability: 'payable',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tcomponents: [\n\t\t\t\t\t{ internalType: 'string', name: 'contractAddress', type: 'string' },\n\t\t\t\t\t{ internalType: 'bytes', name: 'msg', type: 'bytes' },\n\t\t\t\t\t{ internalType: 'bytes', name: 'coins', type: 'bytes' }\n\t\t\t\t],\n\t\t\t\tinternalType: 'struct IWasmd.ExecuteMsg[]',\n\t\t\t\tname: 'executeMsgs',\n\t\t\t\ttype: 'tuple[]'\n\t\t\t}\n\t\t],\n\t\tname: 'execute_batch',\n\t\toutputs: [{ internalType: 'bytes[]', name: 'responses', type: 'bytes[]' }],\n\t\tstateMutability: 'payable',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{ internalType: 'uint64', name: 'codeID', type: 'uint64' },\n\t\t\t{ internalType: 'string', name: 'admin', type: 'string' },\n\t\t\t{ internalType: 'bytes', name: 'msg', type: 'bytes' },\n\t\t\t{ internalType: 'string', name: 'label', type: 'string' },\n\t\t\t{ internalType: 'bytes', name: 'coins', type: 'bytes' }\n\t\t],\n\t\tname: 'instantiate',\n\t\toutputs: [\n\t\t\t{ internalType: 'string', name: 'contractAddr', type: 'string' },\n\t\t\t{ internalType: 'bytes', name: 'data', type: 'bytes' }\n\t\t],\n\t\tstateMutability: 'payable',\n\t\ttype: 'function'\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{ internalType: 'string', name: 'contractAddress', type: 'string' },\n\t\t\t{ internalType: 'bytes', name: 'req', type: 'bytes' }\n\t\t],\n\t\tname: 'query',\n\t\toutputs: [{ internalType: 'bytes', name: 'response', type: 'bytes' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function'\n\t}\n];\nconst ETHERS_WASM_PRECOMPILE_ABI = WASM_PRECOMPILE_ABI;\n/**\n * Creates and returns an ethers v6 contract instance with the provided signer, for use in interoperability between the EVM and Cosmos.\n *\n * @example\n * ethers v6: Use the `ethers` library and precompiles to read the associated Cosmos address for the connected account.\n * ```tsx\n * import { getWasmPrecompileEthersV6Contract } from '@sei-js/evm';\n * import { ethers } from 'ethers';\n *\n * const provider = new ethers.BrowserProvider(window.ethereum); // or any other provider\n * const signer = await provider.getSigner();\n *\n * const wasmPrecompileContract = getWasmPrecompileEthersV6Contract(signer);\n *\n * const queryResponse = await addressPrecompileContract.connect().query(CONTRACT_ADDRESS, REQUEST);\n * ```\n *\n * @param runner a [Provider](https://docs.ethers.org/v6/api/providers/) (read-only) or ethers.Signer to use with the contract.\n * @returns The typed contract instance allowing interaction with the precompile contract.\n * @category Cosmos Interoperability\n */\nconst getWasmPrecompileEthersV6Contract = (runner) => {\n\treturn new ethers__WEBPACK_IMPORTED_MODULE_0__.Contract(WASM_PRECOMPILE_ADDRESS, ETHERS_WASM_PRECOMPILE_ABI, runner);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@sei-js/evm/dist/esm/precompiles/wasm.js\n");

/***/ })

};
;